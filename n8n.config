# Szczegółowa konfiguracja automatyzacji n8n dla aplikacji Memcoin Tracker

## Instalacja i uruchomienie n8n

### Opcja 1: Lokalne uruchomienie

1. Zainstaluj n8n globalnie:
```bash
npm install -g n8n
```

2. Uruchom n8n:
```bash
n8n start
```

### Opcja 2: Uruchomienie za pomocą Docker (zalecane dla produkcji)

1. Utwórz katalog dla danych n8n:
```bash
mkdir -p ~/.n8n
```

2. Uruchom kontener Docker:
```bash
docker run -it --rm \
  --name n8n \
  -p 5678:5678 \
  -v ~/.n8n:/home/node/.n8n \
  -e WEBHOOK_URL=http://localhost:5678/ \
  -e GENERIC_TIMEZONE="Europe/Warsaw" \
  n8nio/n8n
```

### Opcja 3: Użycie docker-compose

1. Utwórz plik `docker-compose.n8n.yml`:
```yaml
version: '3'

services:
  n8n:
    image: n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_HOST=localhost
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - WEBHOOK_URL=http://localhost:5678/
      - TZ=Europe/Warsaw
      - N8N_ENCRYPTION_KEY=your-encryption-key
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
    volumes:
      - ~/.n8n:/home/node/.n8n
```

2. Uruchom usługi:
```bash
docker-compose -f docker-compose.n8n.yml up -d
```

## Konfiguracja kredencjałów w n8n

Przed uruchomieniem przepływów pracy, należy skonfigurować odpowiednie kredencjały:

### 1. Konfiguracja kredencjałów API Memcoin Tracker

1. W interfejsie n8n przejdź do "Credentials" (Poświadczenia)
2. Kliknij "Add Credential" (Dodaj poświadczenie)
3. Wybierz typ "HTTP Request"
4. Wypełnij formularz:
   - Name: Memcoin Tracker API
   - Authentication: None (API nie wymaga uwierzytelnienia dla podstawowych endpointów)
   - Nie zaznaczaj "Include default options"

### 2. Konfiguracja kredencjałów CoinGecko API

1. W interfejsie n8n przejdź do "Credentials"
2. Kliknij "Add Credential"
3. Wybierz typ "HTTP Request"
4. Wypełnij formularz:
   - Name: CoinGecko API
   - Authentication: Header Auth
   - Parameter Name: X-CoinGecko-API-Key
   - Parameter Value: [Twój klucz API CoinGecko]

### 3. Konfiguracja kredencjałów Twitter API

1. W interfejsie n8n przejdź do "Credentials"
2. Kliknij "Add Credential"
3. Wybierz typ "Twitter"
4. Wypełnij formularz z danymi z Twitter Developer Portal:
   - API Key: [Twój klucz API]
   - API Secret: [Twój klucz tajny API]
   - Access Token: [Twój token dostępu]
   - Access Token Secret: [Twój tajny token dostępu]

## Szczegółowy opis poszczególnych przepływów pracy

### 1. Odświeżanie danych memcoinów

Ten przepływ pracy jest odpowiedzialny za regularne pobieranie aktualnych danych o memcoinach z CoinGecko i aktualizację bazy danych aplikacji.

**Węzły:**
1. **Schedule Trigger** - Uruchamia workflow co godzinę
   - Mode: Basic
   - Interval: Every Hour
   - First Execution: Start Now
   - Weekdays: Monday-Sunday

2. **HTTP Request (CoinGecko)** - Pobiera dane z CoinGecko API
   - Method: GET
   - URL: https://api.coingecko.com/api/v3/coins/markets
   - Query Parameters:
     - vs_currency: usd
     - category: meme-token
     - order: market_cap_desc
     - per_page: 100
     - page: 1
     - sparkline: false
     - price_change_percentage: 24h

3. **Function** - Przekształca dane
   ```javascript
   // Przekształcamy dane na właściwy format
   const transformedData = items[0].json.map(coin => {
     return {
       json: {
         symbol: coin.symbol.toUpperCase(),
         name: coin.name,
         logo: coin.image,
         currentPrice: coin.current_price,
         priceChange24h: coin.price_change_24h || 0,
         priceChangePercentage24h: coin.price_change_percentage_24h || 0,
         marketCap: coin.market_cap || 0,
         volume24h: coin.total_volume || 0,
         circulatingSupply: coin.circulating_supply,
         totalSupply: coin.total_supply,
         ath: coin.ath,
         athDate: coin.ath_date
       }
     };
   });
   
   return transformedData;
   ```

4. **HTTP Request (App API)** - Wysyła dane do API aplikacji
   - Method: POST
   - URL: http://your-app-domain.com/api/coins/batch-update
   - Body: ={{$json}}
   - Headers:
     - Content-Type: application/json

5. **IF** - Warunek sprawdzający powodzenie
   - Value 1: {{$node["HTTP Request (App API)"].json.success}}
   - Value 2: true
   - Operation: Equal
   
6. **Slack (Success)** - Wysyła powiadomienie o sukcesie (opcjonalnie)
   - Channel: #memcoin-tracker-monitoring
   - Text: ✅ Dane memcoinów zostały pomyślnie zaktualizowane ({{$node["HTTP Request (App API)"].json.updatedCount}} monet)

7. **Slack (Error)** - Wysyła powiadomienie o błędzie (opcjonalnie)
   - Channel: #memcoin-tracker-monitoring
   - Text: ❌ Błąd podczas aktualizacji danych memcoinów: {{$node["HTTP Request (App API)"].json.error}}

### 2. Analiza sentymentu społeczności

Ten przepływ pracy zbiera i analizuje sentyment z mediów społecznościowych dla najpopularniejszych memcoinów.

**Węzły:**
1. **Schedule Trigger** - Uruchamia workflow co 6 godzin
   - Mode: Basic
   - Interval: Every X Hours
   - Value: 6
   - First Execution: Start Now
   - Weekdays: Monday-Sunday

2. **HTTP Request (Top Coins)** - Pobiera top memcoiny
   - Method: GET
   - URL: http://your-app-domain.com/api/coins
   - Query Parameters:
     - limit: 20
     - sort: marketCap
     - order: desc

3. **Function (Extract Coins)** - Wyodrębnia monety z odpowiedzi
   ```javascript
   // Wyodrębniamy top 10 monet pod względem kapitalizacji rynkowej
   const coins = items[0].json.coins.slice(0, 10);
   
   // Przekształcamy na format używany przez Twitter API
   return coins.map(coin => {
     return {
       json: {
         symbol: coin.symbol,
         name: coin.name,
         id: coin.id
       }
     };
   });
   ```

4. **Split In Batches** - Dzieli na partie do przetwarzania
   - Batch Size: 1
   - Options: Return all items at once

5. **Twitter (Recent Search)** - Wyszukuje tweety
   - Operation: Search Tweets
   - Search Text: {{$json.symbol}} (crypto OR memecoin OR token) -is:retweet
   - Include: Extended Tweet Fields
   - Result Type: Recent
   - Max Results: 100
   - Additional Fields:
     - Tweet Fields: created_at,public_metrics,entities
     - Expansions: author_id
     - User Fields: description,public_metrics

6. **Function (Analyze Sentiment)** - Analizuje sentyment tweetów
   ```javascript
   // Proste słowniki dla analizy sentymentu
   const positiveKeywords = ['moon', 'bullish', 'gem', 'rocket', 'hodl', 'hold', 'gains', 'profit'];
   const negativeKeywords = ['dump', 'scam', 'rugpull', 'rug', 'ponzi', 'crash', 'bear', 'bearish', 'sell'];
   
   // Pobieramy tweety i symbol
   const tweets = items[0].json.statuses;
   const coin = items[0].json.query.replace(/\(.*\)/g, '').trim();
   
   // Analiza
   let positive = 0;
   let negative = 0;
   let neutral = 0;
   let totalEngagement = 0;
   
   const analyzedTweets = tweets.map(tweet => {
     const text = tweet.text.toLowerCase();
     
     const posMatches = positiveKeywords.filter(word => text.includes(word)).length;
     const negMatches = negativeKeywords.filter(word => text.includes(word)).length;
     
     let sentiment;
     if (posMatches > negMatches) {
       sentiment = 'positive';
       positive++;
     } else if (negMatches > posMatches) {
       sentiment = 'negative';
       negative++;
     } else {
       sentiment = 'neutral';
       neutral++;
     }
     
     // Obliczamy zaangażowanie
     const engagement = tweet.retweet_count * 2 + tweet.favorite_count + (tweet.reply_count || 0) * 1.5;
     totalEngagement += engagement;
     
     return { id: tweet.id_str, text, sentiment, engagement, created_at: tweet.created_at };
   });
   
   // Obliczamy całkowity sentyment
   const totalTweets = positive + negative + neutral;
   let sentimentScore = 50; // Neutralna wartość
   
   if (totalTweets > 0) {
     const positivePercentage = (positive / totalTweets) * 100;
     const negativePercentage = (negative / totalTweets) * 100;
     sentimentScore = Math.min(Math.max(50 + (positivePercentage - negativePercentage) / 2, 0), 100);
   }
   
   return {
     json: {
       symbol: coin,
       tweetCount: totalTweets,
       positive_count: positive,
       negative_count: negative,
       neutral_count: neutral,
       sentiment_score: sentimentScore,
       total_engagement: totalEngagement,
       average_engagement: totalTweets > 0 ? totalEngagement / totalTweets : 0,
       top_tweets: analyzedTweets.sort((a, b) => b.engagement - a.engagement).slice(0, 5)
     }
   };
   ```

7. **HTTP Request (Update Sentiment)** - Wysyła dane sentymentu do API
   - Method: POST
   - URL: http://your-app-domain.com/api/social/sentiment
   - Body: ={{$json}}
   - Headers:
     - Content-Type: application/json

### 3. Aktualizacja predykcji

Ten przepływ pracy uruchamia aktualizację modelu predykcyjnego dla wszystkich memcoinów.

**Węzły:**
1. **Schedule Trigger** - Uruchamia workflow co 12 godzin
   - Mode: Basic
   - Interval: Every X Hours
   - Value: 12
   - First Execution: Start Now
   - Weekdays: Monday-Sunday

2. **HTTP Request (Update Predictions)** - Wywołuje endpoint aktualizacji predykcji
   - Method: POST
   - URL: http://your-app-domain.com/api/predictions
   - Body: { "action": "updateAll" }
   - Headers:
     - Content-Type: application/json

3. **Wait** - Czeka 10 minut na zakończenie aktualizacji
   - Wait Amount: 10
   - Unit: Minutes

4. **HTTP Request (Get Top Predictions)** - Pobiera najlepsze predykcje
   - Method: GET
   - URL: http://your-app-domain.com/api/predictions
   - Query Parameters:
     - limit: 10

5. **Function (Format Alert)** - Formatuje alertów dla potencjalnych monet
   ```javascript
   // Pobieramy top predykcje
   const predictions = items[0].json;
   
   // Filtrujemy tylko monety z wysokim prawdopodobieństwem sukcesu
   const highPotentialCoins = predictions.filter(p => p.successProbability >= 75);
   
   if (highPotentialCoins.length === 0) {
     return { json: { noHighPotential: true } };
   }
   
   // Tworzymy wiadomość z alertem
   let alertMessage = "🚀 *Memcoiny z wysokim potencjałem*\n\n";
   
   highPotentialCoins.forEach((coin, index) => {
     alertMessage += `${index + 1}. *${coin.name} (${coin.symbol})*\n`;
     alertMessage += `   Prawdopodobieństwo sukcesu: ${coin.successProbability.toFixed(1)}%\n`;
     alertMessage += `   Sentyment społeczności: ${coin.factors.socialSentiment.total.toFixed(1)}\n`;
     alertMessage += `   Wzrost społeczności: ${coin.factors.communityGrowth.toFixed(1)}%\n\n`;
   });
   
   return {
     json: {
       message: alertMessage,
       coins: highPotentialCoins
     }
   };
   ```

6. **IF** - Sprawdza czy istnieją monety z wysokim potencjałem
   - Value 1: {{$node["Function (Format Alert)"].json.noHighPotential}}
   - Value 2: true
   - Operation: Not Equal

7. **Slack** - Wysyła alert o monetach z wysokim potencjałem (opcjonalnie)
   - Channel: #memcoin-opportunities
   - Text: {{$node["Function (Format Alert)"].json.message}}

8. **Telegram** - Wysyła alert na Telegram (opcjonalnie)
   - Bot: Memcoin Tracker Bot
   - Chat ID: [ID czatu lub kanału]
   - Text: {{$node["Function (Format Alert)"].json.message}}
   - Parse Mode: Markdown

### 4. Monitorowanie nagłych zmian

Ten przepływ pracy monitoruje nagłe zmiany cen i wolumenu, generując odpowiednie alerty.

**Węzły:**
1. **Schedule Trigger** - Uruchamia workflow co 30 minut
   - Mode: Basic
   - Interval: Every X Minutes
   - Value: 30
   - First Execution: Start Now
   - Weekdays: Monday-Sunday

2. **HTTP Request (Get Coins)** - Pobiera najnowsze dane o monetach
   - Method: GET
   - URL: http://your-app-domain.com/api/coins
   - Query Parameters:
     - limit: 100
     - refresh: true

3. **Function (Detect Changes)** - Wykrywa znaczące zmiany
   ```javascript
   const coins = items[0].json.coins;
   
   // Wykrywanie znaczących zmian cen
   const priceAlerts = coins.filter(coin => {
     return Math.abs(coin.priceChangePercentage24h) >= 20; // 20% lub więcej zmiany
   }).map(coin => {
     const isPositive = coin.priceChangePercentage24h > 0;
     return {
       type: isPositive ? 'price_surge' : 'price_drop',
       symbol: coin.symbol,
       name: coin.name,
       change: coin.priceChangePercentage24h,
       currentPrice: coin.currentPrice,
       message: `${coin.name} (${coin.symbol}) ${isPositive ? 'wzrósł o' : 'spadł o'} ${Math.abs(coin.priceChangePercentage24h).toFixed(2)}% w ciągu ostatnich 24h`
     };
   });
   
   // Wykrywanie znaczących zmian wolumenu
   const volumeAlerts = coins.filter(coin => {
     // Sprawdzamy czy wolumen wzrósł co najmniej 3x w porównaniu do średniej
     const volumeRatio = coin.volume24h / (coin.volume7d / 7);
     return volumeRatio >= 3;
   }).map(coin => {
     const volumeRatio = coin.volume24h / (coin.volume7d / 7);
     return {
       type: 'volume_spike',
       symbol: coin.symbol,
       name: coin.name,
       volumeRatio: volumeRatio,
       volume24h: coin.volume24h,
       message: `${coin.name} (${coin.symbol}) ma ${volumeRatio.toFixed(1)}x wyższy wolumen niż średnia z 7 dni`
     };
   });
   
   // Łączymy wszystkie alerty
   const allAlerts = [...priceAlerts, ...volumeAlerts];
   
   return { json: { alerts: allAlerts } };
   ```

4. **IF** - Sprawdza czy są jakieś alerty
   - Value 1: {{$node["Function (Detect Changes)"].json.alerts.length}}
   - Value 2: 0
   - Operation: Larger

5. **HTTP Request (Create Alerts)** - Tworzy alerty w systemie
   - Method: POST
   - URL: http://your-app-domain.com/api/alerts/batch
   - Body: ={{$node["Function (Detect Changes)"].json.alerts}}
   - Headers:
     - Content-Type: application/json

## Automatyczna konfiguracja n8n jako usługi systemowej (Linux)

Aby uruchomić n8n jako usługę systemową, utwórz plik konfiguracyjny usługi systemd:

1. Utwórz plik `/etc/systemd/system/n8n.service`:
```
[Unit]
Description=n8n
After=network.target

[Service]
Type=simple
User=n8n
WorkingDirectory=/home/n8n
ExecStart=/usr/bin/n8n start
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

2. Utwórz użytkownika n8n:
```bash
sudo adduser --system --group n8n
```

3. Włącz i uruchom usługę:
```bash
sudo systemctl enable n8n
sudo systemctl start n8n
```

4. Sprawdź status usługi:
```bash
sudo systemctl status n8n
```

## Aktualizacja przepływów pracy

Po konfiguracji przepływów pracy, możesz eksportować je jako pliki JSON i przechowywać w repozytorium aplikacji:

1. Eksportuj przepływ z interfejsu n8n:
   - Kliknij na przepływ pracy
   - Wybierz "Download"
   - Zapisz plik JSON

2. Przechowuj pliki JSON w katalogu `/n8n-workflows` projektu.

3. Opublikuj szablon logowania:
```bash
cp /path/to/your/project/n8n-workflows/logs.js ~/.n8n/nodes/
```

## Monitorowanie n8n

Aby monitorować stan n8n, można skonfigurować alerty za pomocą narzędzi takich jak:

### Prometheus + Grafana

1. Zainstaluj eksporter n8n dla Prometheusa:
```bash
npm install -g n8n-prometheus
```

2. Uruchom eksporter:
```bash
n8n-prometheus
```

3. Skonfiguruj Prometheusa do pobierania metryk z n8n:
```yaml
scrape_configs:
  - job_name: 'n8n'
    static_configs:
      - targets: ['localhost:9842']
```

4. Skonfiguruj pulpit Grafana do monitorowania n8n.

### Heartbeat n8n

Utwórz prosty przepływ pracy, który będzie uruchamiany co minutę i wysyłał sygnał do serwisu monitorującego, takiego jak UptimeRobot:

1. **Schedule Trigger** - Uruchamia workflow co minutę
2. **HTTP Request** - Wysyła ping do serwisu monitorującego
   - Method: GET
   - URL: [Link do monitorowania]

## Rozwiązywanie problemów

### Problem: Workflow nie uruchamia się zgodnie z harmonogramem

1. Sprawdź logi n8n:
```bash
sudo journalctl -u n8n.service
```

2. Sprawdź ustawienia czasowe w n8n:
```bash
sudo docker exec -it n8n n8n --diagnose
```

3. Upewnij się, że strefa czasowa jest poprawnie ustawiona:
```bash
sudo docker exec -it n8n date
```

### Problem: Błędy połączenia z API

1. Sprawdź, czy API jest dostępne:
```bash
curl -I http://your-app-domain.com/api/health
```

2. Sprawdź poświadczenia API:
```bash
sudo docker exec -it n8n n8n credential:list
```

3. Sprawdź logi n8n dla szczegółów błędu:
```bash
sudo docker exec -it n8n cat /home/node/.n8n/logs/n8n.log
```

### Problem: Wysoka użycie zasobów

1. Ogranicz liczbę równoległych zadań:
```bash
export N8N_PROCESS_CONCURRENCY=2
```

2. Zwiększ przydzielone zasoby w docker-compose:
```yaml
services:
  n8n:
    # ...
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
```

## Kopie zapasowe konfiguracji n8n

Wykonuj regularne kopie zapasowe konfiguracji n8n:

```bash
# Utwórz katalog kopii zapasowych
mkdir -p ~/n8n-backups

# Wykonaj kopię zapasową konfiguracji
tar -czf ~/n8n-backups/n8n-backup-$(date +%Y%m%d).tar.gz ~/.n8n

# Opcjonalnie, zautomatyzuj za pomocą crona
echo "0 0 * * 0 tar -czf ~/n8n-backups/n8n-backup-\$(date +\%Y\%m\%d).tar.gz ~/.n8n" | crontab -
```

## Dodatkowe zasoby

- [Dokumentacja n8n](https://docs.n8n.io/)
- [Samouczki n8n](https://n8n.io/learn/)
- [Forum społeczności n8n](https://community.n8n.io/)
- [GitHub n8n](https://github.com/n8n-io/n8n)